#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Generalized instrument that services commands generated by clients over
variuos protocols (MQTT, OPC UA).
"""
import queue
import argparse
import logging
import coloredlogs
from opc_client import OpcClient
from socket_client import SocketClient
import helper_functions
from pdb import set_trace

__author__ = "Brent Maranzano"
__license__ = "MIT"


def setup_logger(config_file="./logger_conf.yml"):
    """Start the logger
    """
    config = helper_functions.yaml_to_dict(config_file)
    logging.config.dictConfig(config)
    coloredlogs.install(level="DEBUG")
    logger = logging.getLogger(__name__)
    return logger


try:
    logger = setup_logger()
except Exception:
    pass


class Instrument(object):
    """Abastract instrument interface that services command requests generated
    by clients connected by various protocols (e.g. MQTT, HTTP, OPC UA).
    Service parameters and command mappings are defined in an auxillary YAML
    file.  Inhereting classes provide the instrument specific available
    commands.
    """

    def __init__(self, config_file):
        """Sets an object attribute with defining the service parameters

        Arguments
        config_file (str): Filename containing the configuration parameters for
                            the instrument and services.
        """
        self._params = self._get_parameters(config_file)
        self._queue = queue.Queue()

    def _get_parameters(self, config_file):
        """Read and parse the yaml file containing the
        configuration parameters to start the services.

        Arguments
        config_file (str) Filename containing parameters formatted
                            as yaml.
        """
        params = helper_functions.yaml_to_dict(parameter_file)
        logger.info("retrieved service parameters from file")
        return params

    def datachange_notification(self, node, val, data):
        """Method required for opc
        """
        logger.info("""data change""")
        if "method" in self._nodes[node]:
            command = self._nodes[node]["method"]
            try:
                getattr(self, command)
            except Exception:
                raise Exception

    def _execute_que(self):
        """Pop a command off of the queue and execute.
        """
        pass

    def _queue_request(self, request):
        """Queue the command.

        Arguments
        request (dict): request object
        """
        self.queue.put(request)

    def _process_request(self, request):
        """process the request:
        1. validate the request
        2. immediately service requests if possible
        3. queue requests that cannot be immediately serviced

        Arguments
        request (dict): request object
        """

    def run(self):
        """Start the instrument.
        """
        opc = OpcClient.start_service(self._params["opc"], self)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Service to relay data and commands between"
                    " OPC client and socket client."
    )
    parser.add_argument(
        "--parameter_file",
        help="YAML file containing parameters that define the services."
             " See docstring for example.",
        type=str,
        default="parameter_file.yml"
    )
    args = parser.parse_args()
    relay = SocketRelay(args.parameter_file)
    relay.run()
